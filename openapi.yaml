openapi: 3.0.1
info:
  title: Dockstore API
  description: <script>window.alert(1)</script>This describes the dockstore API, a webservice that manages pairs of
    Docker images and associated metadata such as CWL documents and Dockerfiles used
    to build those images. Explore swagger.json for a Swagger 2.0 description of our
    API and explore openapi.yaml for OpenAPI 3.0 descriptions.
  termsOfService: TBD
  contact:
    name: Dockstore@ga4gh
    url: https://discuss.dockstore.org/t/opening-helpdesk-tickets/1506
    email: theglobalalliance@genomicsandhealth.org
  license:
    name: Apache License Version 2.0
    url: https://github.com/dockstore/dockstore/blob/develop/LICENSE
  version: 1.10.0-alpha.2-SNAPSHOT
servers:
- url: /api
  description: Current server when hosted on AWS
  variables: {}
- url: /
  description: When working locally
  variables: {}
- url: https://dockstore.org/api
  description: Production server
  variables: {}
- url: https://staging.dockstore.org/api
  description: Staging server
  variables: {}
- url: https://dev.dockstore.net/api
  description: Nightly build server
  variables: {}
tags:
- name: aliases
  description: Create, update list aliases for accessing entries
- name: organizations
  description: Operations on Dockstore organizations
- name: NIHdatacommons
  description: Needed for SmartAPI compatibility apparantly, might be cargo cult behaviour
- name: containers
  description: List and register entries in the dockstore (pairs of images + metadata
    (CWL and Dockerfile))
- name: containertags
  description: List and modify tags for containers
- name: entries
  description: Interact with entries in Dockstore regardless of whether they are containers
    or workflows
- name: hosted
  description: Created and modify hosted entries in the dockstore
- name: lambdaEvents
  description: Query lambda events triggered by GitHub Apps
- name: metadata
  description: Information about Dockstore like RSS, sitemap, lists of dependencies,
    etc.
- name: curation
  description: List and modify notifications for users of Dockstore
- name: workflows
  description: List and register workflows in the dockstore (CWL, Nextflow, WDL)
- name: tokens
  description: List, modify, refresh, and delete tokens for external services
- name: toolTester
  description: Interactions with the Dockstore-support's ToolTester application
- name: users
  description: List, modify, and manage end users of the dockstore
- name: extendedGA4GH
  description: Optional experimental extensions of the GA4GH API
- name: GA4GHV20
  description: A curated subset of resources proposed as a common standard for tool
    repositories. Implements TRS [2.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0).
- name: GA4GH
  description: A curated subset of resources proposed as a common standard for tool
    repositories. Implements TRS [2.0.0-beta.2](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0-beta.2)
    . Integrators are welcome to use these endpoints but they are subject to change
    based on community input.
- name: GA4GHV1
  description: A curated subset of resources proposed as a common standard for tool
    repositories. Implements TRS [1.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/1.0.0)
    and is considered final (not subject to change)
paths:
  /aliases/workflow-versions/{workflowVersionId}:
    post:
      tags:
      - aliases
      description: Add aliases linked to a workflow version in Dockstore.
      operationId: addAliases_1
      parameters:
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowVersion'
      security:
      - bearer: []
  /aliases/workflow-versions/{alias}:
    get:
      tags:
      - aliases
      description: Retrieves workflow version path information by alias.
      operationId: getWorkflowVersionPathInfoByAlias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowVersionPathInfo'
      security:
      - bearer: []
  /organizations/{organizationId}/collections:
    get:
      tags:
      - organizations
      summary: Retrieve all collections for an organization.
      description: Retrieve all collections for an organization. Supports optional
        authentication.
      operationId: getCollectionsFromOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        description: Included fields.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
    post:
      tags:
      - organizations
      summary: Create a collection in the given organization.
      description: Create a collection in the given organization.
      operationId: createCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Collection to register.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/{organizationId}/collections/{collectionId}:
    get:
      tags:
      - organizations
      summary: Retrieve a collection by ID.
      description: Retrieve a collection by ID. Supports optional authentication.
      operationId: getCollectionById_1
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update a collection.
      description: Update a collection. Currently only name, display name, description,
        and topic can be updated.
      operationId: updateCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Collection to register.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/collections/{collectionId}/aliases:
    post:
      tags:
      - organizations
      summary: Add aliases linked to a collection in Dockstore.
      description: Aliases are alphanumerical (case-insensitive and may contain internal
        hyphens), given in a comma-delimited list.
      operationId: addCollectionAliases_1
      parameters:
      - name: collectionId
        in: path
        description: Collection to modify.
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        description: Comma-delimited list of aliases.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/{organizationName}/collections/{collectionName}/name:
    get:
      tags:
      - organizations
      summary: Retrieve a collection by name.
      description: Retrieve a collection by name. Supports optional authentication.
      operationId: getCollectionById
      parameters:
      - name: organizationName
        in: path
        description: Organization name.
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        description: Collection name.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/{organizationId}/collections/{collectionId}/entry:
    post:
      tags:
      - organizations
      summary: Add an entry to a collection.
      description: Add an entry to a collection.
      operationId: addEntryToCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: query
        description: Entry ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
    delete:
      tags:
      - organizations
      summary: Delete an entry to a collection.
      description: Delete an entry to a collection.
      operationId: deleteEntryFromCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: query
        description: Entry ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/collections/{alias}/aliases:
    get:
      tags:
      - organizations
      summary: Retrieve a collection by alias.
      description: Retrieve a collection by alias.
      operationId: getCollectionByAlias
      parameters:
      - name: alias
        in: path
        description: Alias of the collection.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /organizations/{organizationId}/collections/{collectionId}/description:
    get:
      tags:
      - organizations
      summary: Retrieve a collection description by organization ID and collection
        ID.
      description: Retrieve a collection description by organization ID and collection
        ID. Supports optional authentication.
      operationId: getCollectionDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update a collection's description.
      description: Update a collection's description. Description in markdown.
      operationId: updateCollectionDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Collections's description in markdown.
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /containers/tags:
    get:
      tags:
      - containers
      description: List the tags for a tool.
      operationId: tags
      parameters:
      - name: containerId
        in: query
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      security:
      - bearer: []
  /containers/{containerId}/refresh:
    get:
      tags:
      - containers
      description: Refresh one particular tool.
      operationId: refresh
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/{containerId}/publish:
    post:
      tags:
      - containers
      description: Publish or unpublish a tool.
      operationId: publish
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/{containerId}:
    get:
      tags:
      - containers
      description: Retrieve a tool
      operationId: getContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
    put:
      tags:
      - containers
      description: Update the tool with the given tool.
      operationId: updateContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
    delete:
      tags:
      - containers
      description: Delete a tool.
      operationId: deleteContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /containers/{containerId}/users:
    get:
      tags:
      - containers
      description: Get users of a tool.
      operationId: getUsers
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /containers/{containerId}/starredUsers:
    get:
      tags:
      - containers
      description: Returns list of users who starred a tool.
      operationId: getStarredUsers
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /containers/{containerId}/dockerfile:
    get:
      tags:
      - containers
      description: Get the corresponding Dockerfile.
      operationId: dockerfile
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /containers/{containerId}/labels:
    put:
      tags:
      - containers
      description: Update the labels linked to a tool.
      operationId: updateLabels
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: labels
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/{containerId}/primaryDescriptor:
    get:
      tags:
      - containers
      description: Get the primary descriptor file.
      operationId: primaryDescriptor
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /containers/dockerRegistryList:
    get:
      tags:
      - containers
      description: Get the list of docker registries supported on Dockstore.
      operationId: getDockerRegistries
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistryBean'
  /containers/{toolId}/defaultVersion:
    put:
      tags:
      - containers
      description: Update the default version of the given tool.
      operationId: updateDefaultVersion
      parameters:
      - name: toolId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/{containerId}/updateTagPaths:
    put:
      tags:
      - containers
      description: Change the tool paths.
      operationId: updateTagContainerPath
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/published/{containerId}:
    get:
      tags:
      - containers
      operationId: getPublishedContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/namespace/{namespace}/published:
    get:
      tags:
      - containers
      description: List all published tools belonging to the specified namespace.
      operationId: getPublishedContainersByNamespace
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /containers/schema/{containerId}/published:
    get:
      tags:
      - containers
      description: Get a published tool's schema by ID.
      operationId: getPublishedContainerSchema
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /containers/registerManual:
    post:
      tags:
      - containers
      description: Register a tool manually, along with tags.
      operationId: registerManual
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tool'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/published:
    get:
      tags:
      - containers
      description: List all published tools.
      operationId: allPublishedContainers
      parameters:
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      - name: filter
        in: query
        schema:
          type: string
          default: ""
      - name: sortCol
        in: query
        schema:
          type: string
          default: stars
      - name: sortOrder
        in: query
        schema:
          type: string
          default: desc
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /containers/path/{repository}/published:
    get:
      tags:
      - containers
      description: Get a list of published tools by path.
      operationId: getPublishedContainerByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/path/{repository}:
    get:
      tags:
      - containers
      description: Get a list of tools by path.
      operationId: getContainerByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/path/tool/{repository}:
    get:
      tags:
      - containers
      description: Get a tool by the specific tool path
      operationId: getContainerByToolPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/path/tool/{repository}/published:
    get:
      tags:
      - containers
      description: Get a published tool by the specific tool path.
      operationId: getPublishedContainerByToolPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/{containerId}/descriptor/{relative-path}:
    get:
      tags:
      - containers
      description: Get the corresponding descriptor file.
      operationId: secondaryDescriptorPath
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: relative-path
        in: path
        required: true
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /containers/{containerId}/secondaryDescriptors:
    get:
      tags:
      - containers
      description: Get a list of secondary descriptor files.
      operationId: secondaryDescriptors
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /containers/{containerId}/testParameterFiles:
    get:
      tags:
      - containers
      description: Get the corresponding test parameter files.
      operationId: getTestParameterFiles
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
    put:
      tags:
      - containers
      description: Add test parameter files to a tag.
      operationId: addTestParameterFiles
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: tagName
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
    delete:
      tags:
      - containers
      description: Delete test parameter files to a tag.
      operationId: deleteTestParameterFiles
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: tagName
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /containers/{containerId}/star:
    put:
      tags:
      - containers
      description: Star a tool.
      operationId: starEntry
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StarRequest'
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /containers/{toolId}/zip/{tagId}:
    get:
      tags:
      - containers
      description: Download a ZIP file of a tool and all associated files.
      operationId: getToolZip
      parameters:
      - name: toolId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/zip: {}
      security:
      - bearer: []
  /containers/{alias}/aliases:
    get:
      tags:
      - containers
      description: Retrieves a tool by alias.
      operationId: getToolByAlias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/{containerId}/tags:
    put:
      tags:
      - containertags
      description: Update the tags linked to a tool.
      operationId: updateTags
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      security:
      - bearer: []
    post:
      tags:
      - containertags
      description: Add new tags linked to a tool.
      operationId: addTags
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      security:
      - bearer: []
  /containers/{containerId}/tags/{tagId}:
    delete:
      tags:
      - containertags
      description: Delete tag linked to a tool.
      operationId: deleteTags
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /containers/{containerId}/requestDOI/{tagId}:
    post:
      tags:
      - containertags
      description: Request a DOI for this version of a tool.
      operationId: requestDOIForToolTag
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      security:
      - bearer: []
  /containers/{containerId}/tags/{tagId}/sourcefiles:
    get:
      tags:
      - containertags
      description: Retrieve sourcefiles for a container's version
      operationId: getTagsSourcefiles
      parameters:
      - name: containerId
        in: path
        description: Container to retrieve the version from
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        description: Tag to retrieve the sourcefiles from
        required: true
        schema:
          type: integer
          format: int64
      - name: fileTypes
        in: query
        description: List of file types to filter sourcefiles by
        schema:
          type: array
          items:
            type: string
            enum:
            - DOCKSTORE_CWL
            - DOCKSTORE_WDL
            - DOCKERFILE
            - CWL_TEST_JSON
            - WDL_TEST_JSON
            - NEXTFLOW
            - NEXTFLOW_CONFIG
            - NEXTFLOW_TEST_PARAMS
            - DOCKSTORE_YML
            - DOCKSTORE_SERVICE_YML
            - DOCKSTORE_SERVICE_TEST_JSON
            - DOCKSTORE_SERVICE_OTHER
            - DOCKSTORE_GXFORMAT2
            - GXFORMAT2_TEST_FILE
            - DOCKSTORE_SWL
            - SWL_TEST_JSON
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /containers/path/{containerId}/tags:
    get:
      tags:
      - containertags
      description: Get tags for a tool by id.
      operationId: getTagsByPath
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
      security:
      - bearer: []
  /entries/{id}/aliases:
    post:
      tags:
      - entries
      description: Add aliases linked to a entry in Dockstore.
      operationId: addAliases_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliasable'
      security:
      - bearer: []
  /entries/{id}/collections:
    get:
      tags:
      - entries
      description: Get the collections and organizations that contain the published
        entry
      operationId: entryCollections
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionOrganization'
  /entries/{entryId}/verifiedPlatforms:
    get:
      tags:
      - entries
      description: Get the verified platforms for each version of an entry.
      operationId: getVerifiedPlatforms
      parameters:
      - name: entryId
        in: path
        description: id of the entry
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionVerifiedPlatform'
      security:
      - bearer: []
  /entries/{entryId}/versions/{versionId}/fileTypes:
    get:
      tags:
      - entries
      description: Retrieve the unique file types of a version's sourcefile
      operationId: getVersionsFileTypes
      parameters:
      - name: entryId
        in: path
        description: Entry to retrieve the version from
        required: true
        schema:
          type: integer
          format: int64
      - name: versionId
        in: path
        description: Version to retrieve the sourcefile types from
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
                  enum:
                  - DOCKSTORE_CWL
                  - DOCKSTORE_WDL
                  - DOCKERFILE
                  - CWL_TEST_JSON
                  - WDL_TEST_JSON
                  - NEXTFLOW
                  - NEXTFLOW_CONFIG
                  - NEXTFLOW_TEST_PARAMS
                  - DOCKSTORE_YML
                  - DOCKSTORE_SERVICE_YML
                  - DOCKSTORE_SERVICE_TEST_JSON
                  - DOCKSTORE_SERVICE_OTHER
                  - DOCKSTORE_GXFORMAT2
                  - GXFORMAT2_TEST_FILE
                  - DOCKSTORE_SWL
                  - SWL_TEST_JSON
      security:
      - bearer: []
  /entries/{id}/topic:
    post:
      tags:
      - entries
      description: Create a discourse topic for an entry.
      operationId: setDiscourseTopic
      parameters:
      - name: id
        in: path
        description: The id of the entry to add a topic to.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
  /events:
    get:
      tags:
      - events
      summary: Get events based on filters.
      description: Optional authentication.
      operationId: getEvents
      parameters:
      - name: event_search_type
        in: query
        schema:
          type: string
          enum:
          - STARRED_ENTRIES
          - STARRED_ORGANIZATION
          - ALL_STARRED
      - name: limit
        in: query
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      security:
      - bearer: []
  /containers/hostedEntry:
    post:
      tags:
      - hosted
      description: Create a hosted tool.
      operationId: createHostedTool_1
      parameters:
      - name: registry
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      - name: namespace
        in: query
        schema:
          type: string
      - name: entryName
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /containers/hostedEntry/{entryId}:
    delete:
      tags:
      - hosted
      description: Delete a revision of a hosted tool.
      operationId: deleteHostedToolVersion_1
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: version
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
    patch:
      tags:
      - hosted
      description: Non-idempotent operation for creating new revisions of hosted tools.
      operationId: editHostedTool
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/SourceFile'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /workflows/hostedEntry:
    post:
      tags:
      - hosted
      description: Create a hosted workflow.
      operationId: createHostedWorkflow_1
      parameters:
      - name: registry
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      - name: namespace
        in: query
        schema:
          type: string
      - name: entryName
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/hostedEntry/{entryId}:
    post:
      tags:
      - hosted
      summary: Creates a new revision of a hosted workflow from a zip
      operationId: addZip
      parameters:
      - name: entryId
        in: path
        description: hosted entry ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      deprecated: true
      security:
      - bearer: []
    delete:
      tags:
      - hosted
      description: Delete a revision of a hosted workflow.
      operationId: deleteHostedWorkflowVersion_1
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: version
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
    patch:
      tags:
      - hosted
      description: Non-idempotent operation for creating new revisions of hosted workflows
      operationId: editHostedWorkflow
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/SourceFile'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /lambdaEvents/{organization}:
    get:
      tags:
      - lambdaEvents
      description: Get all of the Lambda Events for the given GitHub organization.
      operationId: getLambdaEventsByOrganization
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: string
          default: "0"
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LambdaEvent'
      security:
      - bearer: []
  /metadata/config.json:
    get:
      tags:
      - metadata
      summary: Configuration for UI clients of the API
      description: Configuration, NO authentication
      operationId: getConfig
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
  /metadata/sitemap:
    get:
      tags:
      - metadata
      summary: List all available workflow, tool, organization, and collection paths.
      description: List all available workflow, tool, organization, and collection
        paths. Available means published for tools/workflows, and approved for organizations
        and their respective collections. NO authentication
      operationId: sitemap
      responses:
        default:
          description: default response
          content:
            text/html:
              schema:
                type: string
            text/xml:
              schema:
                type: string
  /metadata/rss:
    get:
      tags:
      - metadata
      summary: List all published tools and workflows in creation order
      description: List all published tools and workflows in creation order, NO authentication
      operationId: rssFeed
      responses:
        default:
          description: default response
          content:
            text/xml:
              schema:
                type: string
  /metadata/runner_dependencies:
    get:
      tags:
      - metadata
      summary: Returns the file containing runner dependencies
      description: Returns the file containing runner dependencies, NO authentication
      operationId: getRunnerDependencies
      parameters:
      - name: client_version
        in: query
        description: The Dockstore client version
        schema:
          type: string
      - name: python_version
        in: query
        description: Python version, only relevant for the cwltool runner
        schema:
          type: string
          default: "3"
      - name: runner
        in: query
        description: The tool runner
        schema:
          type: string
          default: cwltool
          enum:
          - cwltool
      - name: output
        in: query
        description: Response type
        schema:
          type: string
          default: text
          enum:
          - json
          - text
      responses:
        default:
          description: The requirements.txt file
          content:
            application/json:
              schema:
                type: string
  /metadata/sourceControlList:
    get:
      tags:
      - metadata
      summary: Get the list of source controls supported on Dockstore
      description: Get the list of source controls supported on Dockstore, NO authentication
      operationId: getSourceControlList
      responses:
        default:
          description: List of source control repositories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlBean'
  /metadata/dockerRegistryList:
    get:
      tags:
      - metadata
      summary: Get the list of docker registries supported on Dockstore
      description: Get the list of docker registries supported on Dockstore, NO authentication
      operationId: getDockerRegistries_1
      responses:
        default:
          description: List of Docker registries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistryBean'
  /metadata/descriptorLanguageList:
    get:
      tags:
      - metadata
      summary: Get the list of descriptor languages supported on Dockstore
      description: Get the list of descriptor languages supported on Dockstore, NO
        authentication
      operationId: getDescriptorLanguages
      responses:
        default:
          description: List of descriptor languages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DescriptorLanguageBean'
  /metadata/okHttpCachePerformance:
    get:
      tags:
      - metadata
      summary: Get measures of cache performance
      description: Get measures of cache performance, NO authentication
      operationId: getCachePerformance
      responses:
        default:
          description: Cache performance information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /metadata/elasticSearch:
    get:
      tags:
      - metadata
      summary: Successful response if elastic search is up and running
      description: Successful response if elastic search is up and running, NO authentication
      operationId: checkElasticSearch
      responses:
        default:
          description: default response
          content:
            text/html: {}
            text/xml: {}
  /curation/notifications:
    get:
      tags:
      - curation
      description: Return all active notifications
      operationId: getActiveNotifications
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
    post:
      tags:
      - curation
      description: Create a notification
      operationId: createNotification
      requestBody:
        description: Notification to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
      security:
      - bearer: []
  /curation/notifications/{id}:
    get:
      tags:
      - curation
      description: Return the notification with given id
      operationId: getNotification
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
    put:
      tags:
      - curation
      description: Update a notification
      operationId: updateNotification
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
      security:
      - bearer: []
    delete:
      tags:
      - curation
      description: Delete a notification
      operationId: deleteNotification
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{organizationId}/aliases:
    post:
      tags:
      - organizations
      summary: Add aliases linked to a listing in Dockstore.
      description: Add aliases linked to a listing in Dockstore. Aliases are alphanumerical
        (case-insensitive and may contain internal hyphens), given in a comma-delimited
        list.
      operationId: addOrganizationAliases_1
      parameters:
      - name: organizationId
        in: path
        description: Organization to modify.
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        description: Comma-delimited list of aliases.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliasable'
      security:
      - bearer: []
  /organizations:
    get:
      tags:
      - organizations
      summary: List all available organizations.
      description: List all organizations that have been approved by a curator or
        admin, sorted by number of stars.
      operationId: getApprovedOrganizations
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      tags:
      - organizations
      summary: Create an organization.
      description: Create an organization. Organization requires approval by an admin
        before being made public.
      operationId: createOrganization
      requestBody:
        description: Organization to register.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/approve:
    post:
      tags:
      - organizations
      summary: Approve an organization.
      description: Approve the organization with the given id. Admin/curator only.
      operationId: approveOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/reject:
    post:
      tags:
      - organizations
      summary: Reject an organization.
      description: Reject the organization with the given id. Admin/curator only.
      operationId: rejectOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/request:
    post:
      tags:
      - organizations
      summary: Re-request an organization review.
      description: Re-request a review of the given organization. Requires the organization
        to be rejected.
      operationId: requestOrganizationReview
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/name/{name}:
    get:
      tags:
      - organizations
      summary: Retrieve an organization by name.
      description: Retrieve an organization by name. Supports optional authentication.
      operationId: getOrganizationByName
      parameters:
      - name: name
        in: path
        description: Organization name.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}:
    get:
      tags:
      - organizations
      summary: Retrieve an organization by ID.
      description: Retrieve an organization by ID. Supports optional authentication.
      operationId: getOrganizationById
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update an organization.
      description: Update an organization. Currently only name, display name, description,
        topic, email, link, avatarUrl, and location can be updated.
      operationId: updateOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Organization to register.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
    delete:
      tags:
      - organizations
      summary: Delete pending or rejected organization
      description: Delete pending or rejected organization
      operationId: deleteRejectedOrPendingOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: NO CONTENT
        "400":
          description: BAD REQUEST
        "403":
          description: FORBIDDEN
      security:
      - bearer: []
  /organizations/{organizationId}/description:
    get:
      tags:
      - organizations
      summary: Retrieve an organization description by organization ID.
      description: Retrieve an organization description by organization ID. Supports
        optional authentication.
      operationId: getOrganizationDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update an organization's description.
      description: Update an organization's description. Expects description in markdown
        format.
      operationId: updateOrganizationDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Organization's description in markdown.
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/members:
    get:
      tags:
      - organizations
      summary: Retrieve all members for an organization.
      description: Retrieve all members for an organization. Supports optional authentication.
      operationId: getOrganizationMembers
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
  /organizations/{organizationId}/events:
    get:
      tags:
      - organizations
      summary: Retrieve all events for an organization.
      description: Retrieve all events for an organization. Supports optional authentication.
      operationId: getOrganizationEvents
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: Start index of paging.  If this exceeds the current result set
          return an empty set.  If not specified in the request, this will start at
          the beginning of the results.
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        description: Amount of records to return in a given page, limited to 100
        required: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      security:
      - bearer: []
  /organizations/{organizationId}/star:
    put:
      tags:
      - organizations
      summary: Star an organization.
      description: Star an organization.
      operationId: starOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: StarRequest to star an organization for a user.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StarRequest'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{organizationId}/starredUsers:
    get:
      tags:
      - organizations
      summary: Return list of users who starred the given approved organization.
      description: Return list of users who starred the given approved organization.
      operationId: getStarredUsersForApprovedOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /organizations/all:
    get:
      tags:
      - organizations
      summary: List all organizations.
      description: List all organizations, regardless of organization status. Admin/curator
        only.
      operationId: getAllOrganizations
      parameters:
      - name: type
        in: query
        description: Filter to apply to organizations.
        required: true
        schema:
          type: string
          enum:
          - all
          - pending
          - rejected
          - approved
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/users/{username}:
    put:
      tags:
      - organizations
      summary: Add a user role to an organization.
      description: Add a user role to an organization.
      operationId: addUserToOrgByUsername
      parameters:
      - name: username
        in: path
        description: User to add to org.
        required: true
        schema:
          type: string
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Role of user.
        content:
          '*/*':
            schema:
              type: string
              enum:
              - MAINTAINER
              - MEMBER
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
  /organizations/{organizationId}/user:
    put:
      tags:
      - organizations
      summary: Add a user role to an organization.
      description: Add a user role to an organization.
      operationId: addUserToOrg
      parameters:
      - name: role
        in: query
        description: Role of user.
        required: true
        schema:
          type: string
          enum:
          - MAINTAINER
          - MEMBER
      - name: userId
        in: query
        description: User ID of user to add to organization.
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: This is here to appease Swagger. It requires PUT methods to have
          a body, even if it is empty. Please leave it empty.
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
    post:
      tags:
      - organizations
      summary: Update a user role in an organization.
      description: Update a user role in an organization.
      operationId: updateUserRole
      parameters:
      - name: role
        in: query
        description: Role of user.
        required: true
        schema:
          type: string
          enum:
          - MAINTAINER
          - MEMBER
      - name: userId
        in: query
        description: User ID of user to add to organization.
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
    delete:
      tags:
      - organizations
      summary: Remove a user from an organization.
      description: Remove a user from an organization.
      operationId: deleteUserRole
      parameters:
      - name: userId
        in: query
        description: User ID of user to add to organization.
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{organizationId}/invitation:
    post:
      tags:
      - organizations
      summary: Accept or reject an organization invitation.
      description: Accept or reject an organization invitation. True accepts the invitation,
        false rejects the invitation.
      operationId: acceptOrRejectInvitation
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: accept
        in: query
        description: Accept or reject.
        required: true
        schema:
          type: boolean
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{alias}/aliases:
    get:
      tags:
      - organizations
      summary: Retrieve an organization by alias.
      description: Retrieve an organization by alias.
      operationId: getOrganizationByAlias
      parameters:
      - name: alias
        in: path
        description: Alias.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /auth/tokens/{tokenId}:
    get:
      tags:
      - tokens
      description: Get a specific token by id.
      operationId: listToken
      parameters:
      - name: tokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
    delete:
      tags:
      - tokens
      description: Delete a token.
      operationId: deleteToken
      parameters:
      - name: tokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /auth/tokens/quay.io:
    get:
      tags:
      - tokens
      description: Add a new quay IO token.
      operationId: addQuayToken
      parameters:
      - name: access_token
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /auth/tokens/gitlab.com:
    get:
      tags:
      - tokens
      description: Add a new gitlab.com token.
      operationId: addGitlabToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /auth/tokens/google:
    post:
      tags:
      - tokens
      description: Allow satellizer to post a new Google token to Dockstore.
      operationId: addGoogleToken
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /auth/tokens/github:
    post:
      tags:
      - tokens
      description: Allow satellizer to post a new GitHub token to dockstore, used
        by login, can create new users.
      operationId: addToken
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /auth/tokens/github.com:
    get:
      tags:
      - tokens
      description: Add a new github.com token, used by accounts page.
      operationId: addGithubToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /auth/tokens/bitbucket.org:
    get:
      tags:
      - tokens
      description: Add a new bitbucket.org token, used by quay.io redirect.
      operationId: addBitbucketToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /auth/tokens/orcid.org:
    post:
      tags:
      - tokens
      summary: Add a new orcid.org token
      description: Using OAuth code from ORCID, request and store tokens from ORCID
        API
      operationId: addOrcidToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /auth/tokens/zenodo.org:
    get:
      tags:
      - tokens
      description: Add a new zenodo.org token, used by accounts page.
      operationId: addZenodoToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /toolTester/logs:
    get:
      tags:
      - toolTester
      summary: Get ToolTester log file
      operationId: getToolTesterLog
      parameters:
      - name: tool_id
        in: query
        description: TRS Tool Id
        required: true
        schema:
          type: string
        example: '#workflow/github.com/dockstore/hello_world'
      - name: tool_version_name
        in: query
        required: true
        schema:
          type: string
        example: v1.0.0
      - name: test_filename
        in: query
        required: true
        schema:
          type: string
        example: hello_world.cwl.json
      - name: runner
        in: query
        required: true
        schema:
          type: string
        example: cwltool
      - name: log_type
        in: query
        required: true
        schema:
          type: string
          enum:
          - FULL
          - SUMMARY
      - name: filename
        in: query
        required: true
        schema:
          type: string
        example: 1554477737092.log
      responses:
        default:
          description: default response
          content:
            text/plain:
              schema:
                type: string
  /toolTester/logs/search:
    get:
      tags:
      - toolTester
      summary: Search for ToolTester log files
      operationId: search
      parameters:
      - name: tool_id
        in: query
        description: TRS Tool Id
        required: true
        schema:
          type: string
        example: '#workflow/github.com/dockstore/hello_world'
      - name: tool_version_name
        in: query
        required: true
        schema:
          type: string
        example: v1.0.0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolTesterLog'
  /users/updateUserMetadata:
    get:
      tags:
      - users
      description: Update metadata of all users.
      operationId: updateUserMetadata
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /users/starredOrganizations:
    get:
      tags:
      - users
      description: Get the authenticated user's starred organizations.
      operationId: getStarredOrganizations
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /users/{userId}:
    get:
      tags:
      - users
      description: Get user by id.
      operationId: getSpecificUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /users/user:
    get:
      tags:
      - users
      description: Get the logged-in user.
      operationId: getUser
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearer: []
    delete:
      tags:
      - users
      description: Delete user if possible.
      operationId: selfDestruct
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: boolean
      security:
      - bearer: []
  /users/username/{username}:
    get:
      tags:
      - users
      description: Get a user by username.
      operationId: listUser
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /users/user/memberships:
    get:
      tags:
      - users
      description: Get the logged-in user's memberships.
      operationId: getUserMemberships
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
  /users/user/extended:
    get:
      tags:
      - users
      description: Get additional information about the authenticated user.
      operationId: getExtendedUserData
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedUserData'
      security:
      - bearer: []
  /users/user/changeUsername:
    post:
      tags:
      - users
      description: Change username if possible.
      operationId: changeUsername
      parameters:
      - name: username
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /users/user/{userId}:
    delete:
      tags:
      - users
      description: Terminate user if possible.
      operationId: terminateUsers
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: boolean
      security:
      - bearer: []
  /users/checkUser/{username}:
    get:
      tags:
      - users
      description: Check if user with some username exists.
      operationId: checkUserExists
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: boolean
      security:
      - bearer: []
  /users/{userId}/tokens:
    get:
      tags:
      - users
      description: Get tokens with user id.
      operationId: getUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /users/{userId}/tokens/github.com:
    get:
      tags:
      - users
      description: Get Github tokens with user id.
      operationId: getGithubUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /users/{userId}/tokens/gitlab.com:
    get:
      tags:
      - users
      description: Get Gitlab tokens with user id.
      operationId: getGitlabUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /users/{userId}/tokens/quay.io:
    get:
      tags:
      - users
      description: Get Quay tokens with user id.
      operationId: getQuayUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /users/{userId}/tokens/dockstore:
    get:
      tags:
      - users
      description: Get Dockstore tokens with user id.
      operationId: getDockstoreUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
      security:
      - bearer: []
  /users/{userId}/containers/published:
    get:
      tags:
      - users
      description: List all published tools from a user.
      operationId: userPublishedContainers
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /users/{userId}/workflows/published:
    get:
      tags:
      - users
      description: List all published workflows from a user.
      operationId: userPublishedWorkflows
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /users/{userId}/containers/{organization}/refresh:
    get:
      tags:
      - users
      description: Refresh all tools owned by the authenticated user with specified
        organization.
      operationId: refreshToolsByOrganization
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: organization
        in: path
        required: true
        schema:
          type: string
      - name: dockerRegistry
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /users/{userId}/workflows:
    get:
      tags:
      - users
      description: List all workflows owned by the authenticated user.
      operationId: userWorkflows
      parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
    patch:
      tags:
      - users
      description: Adds the logged-in user to any Dockstore workflows that they should
        have access to.
      operationId: addUserToDockstoreWorkflows
      parameters:
      - name: userId
        in: path
        description: User to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: This is here to appease Swagger. It requires PATCH methods to
          have a body, even if it is empty. Please leave it empty.
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /users/{userId}/services:
    get:
      tags:
      - users
      description: List all services owned by the authenticated user.
      operationId: userServices
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /users/{userId}/containers:
    get:
      tags:
      - users
      description: List all tools owned by the authenticated user.
      operationId: userContainers
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
      security:
      - bearer: []
  /users/users/organizations:
    get:
      tags:
      - users
      description: Get all of the Dockstore organizations for a user, sorted by most
        recently updated.
      operationId: getUserDockstoreOrganizations
      parameters:
      - name: count
        in: query
        description: Maximum number of organizations to return
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: Filter paths with matching text
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUpdateTime'
      security:
      - bearer: []
  /users/users/entries:
    get:
      tags:
      - users
      description: Get all of the entries for a user, sorted by most recently updated.
      operationId: getUserEntries
      parameters:
      - name: count
        in: query
        description: Maximum number of entries to return
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: Filter paths with matching text
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryUpdateTime'
      security:
      - bearer: []
  /users/starredTools:
    get:
      tags:
      - users
      description: Get the authenticated user's starred tools.
      operationId: getStarredTools
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
  /users/starredWorkflows:
    get:
      tags:
      - users
      description: Get the authenticated user's starred workflows.
      operationId: getStarredWorkflows
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
  /users/user/updateUserMetadata:
    get:
      tags:
      - users
      description: Update metadata for logged in user.
      operationId: updateLoggedInUserMetadata
      parameters:
      - name: source
        in: query
        schema:
          type: string
          enum:
          - quay.io
          - github.com
          - dockstore
          - bitbucket.org
          - gitlab.com
          - zenodo.org
          - google.com
          - orcid.org
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /users/user/{userId}/limits:
    get:
      tags:
      - users
      description: Returns the specified user's limits. ADMIN or CURATOR only
      operationId: getUserLimits
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limits'
      security:
      - bearer: []
    put:
      tags:
      - users
      description: Update the specified user's limits. ADMIN or CURATOR only
      operationId: setUserLimits
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Limits'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limits'
      security:
      - bearer: []
  /users/github/sync:
    post:
      tags:
      - users
      description: Syncs Dockstore account with GitHub App Installations.
      operationId: syncUserWithGitHub
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /users/{userId}/privileges:
    put:
      tags:
      - users
      description: Updates the provided userID to admin or curator status, ADMIN or
        CURATOR only
      operationId: setUserPrivileges
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivilegeRequest'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /users/github/events:
    get:
      tags:
      - users
      description: Get all of the GitHub Events for the logged in user.
      operationId: getUserGitHubEvents
      parameters:
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LambdaEvent'
      security:
      - bearer: []
  /users/registries:
    get:
      tags:
      - users
      description: Get all of the git registries accessible to the logged in user.
      operationId: getUserRegistries
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - dockstore.org
                  - github.com
                  - bitbucket.org
                  - gitlab.com
      security:
      - bearer: []
  /users/registries/{gitRegistry}/organizations:
    get:
      tags:
      - users
      description: Get all of the organizations for a given git registry accessible
        to the logged in user.
      operationId: getUserOrganizations
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
      security:
      - bearer: []
  /users/registries/{gitRegistry}/organizations/{organization}:
    get:
      tags:
      - users
      description: Get all of the repositories for an organization for a given git
        registry accessible to the logged in user.
      operationId: getUserOrganizationRepositories
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      - name: organization
        in: path
        description: Git organization
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
      security:
      - bearer: []
  /users/dockerRegistries:
    get:
      tags:
      - users
      description: Get all of the Docker registries accessible to the logged-in user.
      operationId: getUserDockerRegistries
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearer: []
  /users/dockerRegistries/{dockerRegistry}/organizations:
    get:
      tags:
      - users
      description: Get all of the organizations/namespaces of the Docker registry
        accessible to the logged-in user.
      operationId: getDockerRegistriesOrganization
      parameters:
      - name: dockerRegistry
        in: path
        description: Name of Docker registry
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearer: []
  /users/dockerRegistries/{dockerRegistry}/organizations/{organization}/repositories:
    get:
      tags:
      - users
      description: Get names of repositories associated with a specific namespace
        and Docker registry of the logged-in user.
      operationId: getDockerRegistryOrganizationRepositories
      parameters:
      - name: dockerRegistry
        in: path
        description: Name of Docker registry
        required: true
        schema:
          type: string
      - name: organization
        in: path
        description: Name of organization or namespace
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearer: []
  /workflows/{workflowId}/refresh/{version}:
    get:
      tags:
      - workflows
      description: Refresh one particular workflow version.
      operationId: refreshVersion
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/versions:
    get:
      tags:
      - workflows
      description: List the versions for a published workflow.
      operationId: tags_1
      parameters:
      - name: workflowId
        in: query
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
      security:
      - bearer: []
  /workflows/{workflowId}/refresh:
    get:
      tags:
      - workflows
      description: Refresh one particular workflow.
      operationId: refresh_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/{workflowId}/publish:
    post:
      tags:
      - workflows
      description: Publish or unpublish a workflow.
      operationId: publish_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/{workflowId}/users:
    get:
      tags:
      - workflows
      description: Get users of a workflow.
      operationId: getUsers_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - bearer: []
  /workflows/{workflowId}/starredUsers:
    get:
      tags:
      - workflows
      description: Returns list of users who starred the given workflow.
      operationId: getStarredUsers_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /workflows/{workflowId}:
    get:
      tags:
      - workflows
      description: Retrieve a workflow
      operationId: getWorkflow
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
    put:
      tags:
      - workflows
      description: Update the workflow with the given workflow.
      operationId: updateWorkflow
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/{workflowId}/labels:
    put:
      tags:
      - workflows
      description: Update the labels linked to a workflow.
      operationId: updateLabels_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: labels
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/{workflowId}/primaryDescriptor:
    get:
      tags:
      - workflows
      description: Get the primary descriptor file.
      operationId: primaryDescriptor_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /workflows/{workflowId}/defaultVersion:
    put:
      tags:
      - workflows
      description: Update the default version of a workflow.
      operationId: updateDefaultVersion_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/{workflowId}/restub:
    get:
      tags:
      - workflows
      summary: Restub a workflow
      description: Restub a workflow
      operationId: restub
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/{workflowId}/requestDOI/{workflowVersionId}:
    put:
      tags:
      - workflows
      description: Request a DOI for this version of a workflow.
      operationId: requestDOIForWorkflowVersion
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
      security:
      - bearer: []
  /workflows/{workflowId}/resetVersionPaths:
    put:
      tags:
      - workflows
      description: Reset the workflow paths.
      operationId: updateWorkflowPath
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/published/{workflowId}:
    get:
      tags:
      - workflows
      description: Get a published workflow.
      operationId: getPublishedWorkflow
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/organization/{organization}/published:
    get:
      tags:
      - workflows
      description: List all published workflows of an organization.
      operationId: getPublishedWorkflowsByOrganization
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/published:
    get:
      tags:
      - workflows
      description: List all published workflows.
      operationId: allPublishedWorkflows
      parameters:
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      - name: filter
        in: query
        schema:
          type: string
          default: ""
      - name: sortCol
        in: query
        schema:
          type: string
          default: stars
      - name: sortOrder
        in: query
        schema:
          type: string
          default: desc
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/shared:
    get:
      tags:
      - workflows
      description: Retrieve all workflows shared with user.
      operationId: sharedWorkflows
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SharedWorkflows'
      security:
      - bearer: []
  /workflows/path/workflow/{repository}:
    get:
      tags:
      - workflows
      summary: Get a workflow by path.
      description: Requires full path (including workflow name if applicable).
      operationId: getWorkflowByPath
      parameters:
      - name: repository
        in: path
        description: Repository path
        required: true
        schema:
          type: string
      - name: include
        in: query
        description: 'Comma-delimited list of fields to include: validations, aliases'
        schema:
          type: string
      - name: services
        in: query
        description: Whether to get a service or workflow
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/path/workflow/{repository}/permissions:
    get:
      tags:
      - workflows
      description: Get all permissions for a workflow.
      operationId: getWorkflowPermissions
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
      security:
      - bearer: []
    delete:
      tags:
      - workflows
      description: Remove the specified user role for a workflow.
      operationId: removeWorkflowRole
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
      - name: role
        in: query
        schema:
          type: string
          enum:
          - OWNER
          - WRITER
          - READER
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
      security:
      - bearer: []
    patch:
      tags:
      - workflows
      description: Set the specified permission for a user on a workflow.
      operationId: addWorkflowPermission
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
      security:
      - bearer: []
  /workflows/path/workflow/{repository}/actions:
    get:
      tags:
      - workflows
      description: Gets all actions a user can perform on a workflow.
      operationId: getWorkflowActions
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - write
                  - read
                  - delete
                  - share
      security:
      - bearer: []
  /workflows/path/entry/{repository}:
    get:
      tags:
      - workflows
      description: Get an entry by path.
      operationId: getEntryByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
  /workflows/path/entry/{repository}/published:
    get:
      tags:
      - workflows
      description: Get a published entry by path.
      operationId: getPublishedEntryByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /workflows/path/{repository}:
    get:
      tags:
      - workflows
      description: Get a list of workflows by path.
      operationId: getAllWorkflowByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/path/workflow/{repository}/published:
    get:
      tags:
      - workflows
      description: Get a published workflow by path
      operationId: getPublishedWorkflowByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/manualRegister:
    post:
      tags:
      - workflows
      description: Manually register a workflow.
      operationId: manualRegister
      parameters:
      - name: workflowRegistry
        in: query
        schema:
          type: string
      - name: workflowPath
        in: query
        schema:
          type: string
      - name: defaultWorkflowPath
        in: query
        schema:
          type: string
      - name: workflowName
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      - name: defaultTestParameterFilePath
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/{workflowId}/workflowVersions:
    put:
      tags:
      - workflows
      description: Update the workflow versions linked to a workflow.
      operationId: updateWorkflowVersion
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WorkflowVersion'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
      security:
      - bearer: []
  /workflows/{workflowId}/dag/{workflowVersionId}:
    get:
      tags:
      - workflows
      description: Get the DAG for a given workflow version.
      operationId: getWorkflowDag
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
      security:
      - bearer: []
  /workflows/{workflowId}/tools/{workflowVersionId}:
    get:
      tags:
      - workflows
      description: Get the Tools for a given workflow version.
      operationId: getTableToolContent
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
      security:
      - bearer: []
  /workflows/{workflowId}/workflowVersions/{workflowVersionId}/sourcefiles:
    get:
      tags:
      - workflows
      description: Retrieve sourcefiles for an entry's version
      operationId: getWorkflowVersionsSourcefiles
      parameters:
      - name: workflowId
        in: path
        description: Workflow to retrieve the version from.
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        description: Workflow version to retrieve the version from.
        required: true
        schema:
          type: integer
          format: int64
      - name: fileTypes
        in: query
        description: List of file types to filter sourcefiles by
        schema:
          type: array
          items:
            type: string
            enum:
            - DOCKSTORE_CWL
            - DOCKSTORE_WDL
            - DOCKERFILE
            - CWL_TEST_JSON
            - WDL_TEST_JSON
            - NEXTFLOW
            - NEXTFLOW_CONFIG
            - NEXTFLOW_TEST_PARAMS
            - DOCKSTORE_YML
            - DOCKSTORE_SERVICE_YML
            - DOCKSTORE_SERVICE_TEST_JSON
            - DOCKSTORE_SERVICE_OTHER
            - DOCKSTORE_GXFORMAT2
            - GXFORMAT2_TEST_FILE
            - DOCKSTORE_SWL
            - SWL_TEST_JSON
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /workflows/{entryId}/registerCheckerWorkflow/{descriptorType}:
    post:
      tags:
      - workflows
      description: Register a checker workflow and associates it with the given tool/workflow.
      operationId: registerCheckerWorkflow
      parameters:
      - name: checkerWorkflowPath
        in: query
        schema:
          type: string
      - name: testParameterPath
        in: query
        schema:
          type: string
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: descriptorType
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
  /workflows/{workflowId}/zip/{workflowVersionId}:
    get:
      tags:
      - workflows
      description: Download a ZIP file of a workflow and all associated files.
      operationId: getWorkflowZip
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/zip: {}
      security:
      - bearer: []
  /workflows/{alias}/aliases:
    get:
      tags:
      - workflows
      description: Retrieves a workflow by alias.
      operationId: getWorkflowByAlias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/registries/{gitRegistry}/organizations/{organization}/repositories/{repositoryName}:
    post:
      tags:
      - workflows
      description: Adds a workflow for a registry and repository path with defaults
        set.
      operationId: addWorkflow
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      - name: organization
        in: path
        description: Git repository organization
        required: true
        schema:
          type: string
      - name: repositoryName
        in: path
        description: Git repository name
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BioWorkflow'
      security:
      - bearer: []
    delete:
      tags:
      - workflows
      description: Delete a stubbed workflow for a registry and repository path.
      operationId: deleteWorkflow
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      - name: organization
        in: path
        description: Git repository organization
        required: true
        schema:
          type: string
      - name: repositoryName
        in: path
        description: Git repository name
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /workflows/github/release:
    post:
      tags:
      - workflows
      description: Handle a release of a repository on GitHub. Will create a workflow/service
        and version when necessary.
      operationId: handleGitHubRelease
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - gitReference
              - installationId
              - repository
              - username
              type: object
              properties:
                repository:
                  type: string
                username:
                  type: string
                gitReference:
                  type: string
                installationId:
                  type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      security:
      - bearer: []
  /workflows/github/install:
    post:
      tags:
      - workflows
      description: Handle the installation of our GitHub app onto a repository or
        organization.
      operationId: handleGitHubInstallation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - installationId
              - repositories
              - username
              type: object
              properties:
                repositories:
                  type: string
                username:
                  type: string
                installationId:
                  type: string
      responses:
        "418":
          description: This code tells AWS Lambda not to retry.
      security:
      - bearer: []
  /workflows/github:
    delete:
      tags:
      - workflows
      description: Handles the deletion of a branch on GitHub. Will delete all workflow
        versions that match in all workflows that share the same repository.
      operationId: handleGitHubBranchDeletion
      parameters:
      - name: repository
        in: query
        description: Repository path (ex. dockstore/dockstore-ui2)
        required: true
        schema:
          type: string
      - name: username
        in: query
        description: Username of user on GitHub who triggered action
        required: true
        schema:
          type: string
      - name: gitReference
        in: query
        description: Full git reference for a GitHub branch/tag. Ex. refs/heads/master
          or refs/tags/v1.0
        required: true
        schema:
          type: string
      - name: installationId
        in: query
        description: GitHub installation ID
        required: true
        schema:
          type: string
      responses:
        "418":
          description: This code tells AWS Lambda not to retry.
      security:
      - bearer: []
  /workflows/{workflowId}/descriptor/{relative-path}:
    get:
      tags:
      - workflows
      description: Get the corresponding descriptor file from source control.
      operationId: secondaryDescriptorPath_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: relative-path
        in: path
        required: true
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /workflows/{workflowId}/secondaryDescriptors:
    get:
      tags:
      - workflows
      description: Get the corresponding descriptor documents from source control.
      operationId: secondaryDescriptors_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /workflows/{workflowId}/testParameterFiles:
    get:
      tags:
      - workflows
      description: Get the corresponding test parameter files.
      operationId: getTestParameterFiles_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: version
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
    put:
      tags:
      - workflows
      description: Add test parameter files for a given version.
      operationId: addTestParameterFiles_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: version
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
    delete:
      tags:
      - workflows
      description: Delete test parameter files for a given version.
      operationId: deleteTestParameterFiles_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: version
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
      security:
      - bearer: []
  /workflows/{workflowId}/star:
    put:
      tags:
      - workflows
      description: Star a workflow.
      operationId: starEntry_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StarRequest'
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /api/ga4gh/v2/extended/tools/entry/_search:
    post:
      tags:
      - extendedGA4GH
      summary: Search the index of tools
      description: This endpoint searches the index for all published tools and workflows.
        Used by utilities that expect to talk to an elastic search endpoint.
      operationId: toolsIndexSearch
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        "200":
          description: An elastic search result.
          content:
            application/json:
              schema:
                type: string
  /api/ga4gh/v2/extended/tools/{organization}:
    get:
      tags:
      - extendedGA4GH
      summary: List tools of an organization
      description: This endpoint returns tools of an organization.
      operationId: toolsOrgGet
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: An array of Tools of the input organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolV1'
  /api/ga4gh/v2/extended/workflows/{organization}:
    get:
      tags:
      - extendedGA4GH
      summary: List workflows of an organization
      description: This endpoint returns workflows of an organization.
      operationId: workflowsOrgGet
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: An array of Tools of the input organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolV1'
  /api/ga4gh/v2/extended/organizations:
    get:
      tags:
      - extendedGA4GH
      summary: List all organizations
      description: This endpoint returns list of all organizations.
      operationId: entriesOrgsGet
      responses:
        "200":
          description: An array of organizations' names.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/ga4gh/v2/extended/containers/{organization}:
    get:
      tags:
      - extendedGA4GH
      summary: List entries of an organization
      description: This endpoint returns entries of an organization.
      operationId: entriesOrgGet
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: An array of Tools of the input organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolV1'
  /api/ga4gh/v2/extended/tools/index:
    post:
      tags:
      - extendedGA4GH
      summary: Update the index of tools
      description: This endpoint updates the index for all published tools and workflows.
      operationId: Update the index of tools
      responses:
        "200":
          description: An array of Tools of the input organization.
          content:
            text/plain:
              schema:
                type: integer
      security:
      - bearer: []
  /api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}:
    post:
      tags:
      - extendedGA4GH
      summary: Annotate test JSON with information on whether it ran successfully
        on particular platforms plus metadata
      description: Test JSON can be annotated with whether they ran correctly keyed
        by platform and associated with some metadata.
      operationId: verifyTestParameterFilePost
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        required: true
        schema:
          type: string
      - name: platform
        in: query
        schema:
          type: string
      - name: platform_version
        in: query
        schema:
          type: string
      - name: verified
        in: query
        schema:
          type: boolean
      - name: metadata
        in: query
        schema:
          type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Credentials not provided or incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: The tool test cannot be found to annotate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - bearer: []
  /ga4gh/trs/v2/service-info:
    get:
      tags:
      - GA4GHV20
      summary: Show information about this service. It is assumed that removing this
        endpoint from a URL will result in a valid URL to query against
      operationId: getServiceInfo
      responses:
        "200":
          description: A successful operation to request the service information about
            this running service.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TRSService'
  /ga4gh/trs/v2/toolClasses:
    get:
      tags:
      - GA4GHV20
      summary: List all tool types
      description: 'This endpoint returns all tool-classes available. '
      operationId: toolClassesGet
      responses:
        "200":
          description: A list of potential tool classes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolClass'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolClass'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools:
    get:
      tags:
      - GA4GHV20
      summary: List all tools
      description: 'This endpoint returns all tools available or a filtered subset
        using metadata query parameters. '
      operationId: toolsGet
      parameters:
      - name: id
        in: query
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        schema:
          type: string
      - name: alias
        in: query
        description: Support for this parameter is optional for tool registries that
          support aliases. If provided will only return entries with the given alias.
        schema:
          type: string
      - name: toolClass
        in: query
        description: Filter tools by the name of the subclass (#/definitions/ToolClass)
        schema:
          type: string
      - name: descriptorType
        in: query
        description: Filter tools by the name of the descriptor type (#/definitions/DescriptorType)
        schema:
          type: string
      - name: registry
        in: query
        description: The image registry that contains the image.
        schema:
          type: string
      - name: organization
        in: query
        description: The organization in the registry that published the image.
        schema:
          type: string
      - name: name
        in: query
        description: The name of the image.
        schema:
          type: string
      - name: toolname
        in: query
        description: The name of the tool.
        schema:
          type: string
      - name: description
        in: query
        description: The description of the tool.
        schema:
          type: string
      - name: author
        in: query
        description: The author of the tool (TODO a thought occurs, are we assuming
          that the author of the CWL and the image are the same?).
        schema:
          type: string
      - name: checker
        in: query
        description: Return only checker workflows.
        schema:
          type: boolean
      - name: offset
        in: query
        description: Start index of paging. Pagination results can be based on numbers
          or other values chosen by the registry implementor (for example, SHA values).
          If this exceeds the current result set return an empty set.  If not specified
          in the request, this will start at the beginning of the results.
        schema:
          type: string
      - name: limit
        in: query
        description: Amount of records to return in a given page.
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: An array of Tools that match the filter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}:
    get:
      tags:
      - GA4GHV20
      summary: List one specific tool, acts as an anchor for self references
      description: This endpoint returns one specific tool (which has ToolVersions
        nested inside it).
      operationId: toolsIdGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
            text/plain:
              schema:
                $ref: '#/components/schemas/Tool'
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions:
    get:
      tags:
      - GA4GHV20
      summary: List versions of a tool
      description: Returns all versions of the specified tool.
      operationId: toolsIdVersionsGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: An array of tool versions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolVersion'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolVersion'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/containerfile:
    get:
      tags:
      - GA4GHV20
      summary: Get the container specification(s) for the specified image.
      description: Returns the container specifications(s) for the specified image.
        For example, a CWL CommandlineTool can be associated with one specification
        for a container, a CWL Workflow can be associated with multiple specifications
        for containers.
      operationId: toolsIdVersionsVersionIdContainerfileGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool payload.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
        "404":
          description: There are no container specifications for this tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}:
    get:
      tags:
      - GA4GHV20
      summary: List one specific tool version, acts as an anchor for self references
      description: This endpoint returns one specific tool version.
      operationId: toolsIdVersionsVersionIdGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version, scoped to this registry, for
          example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For
          example, `1.0.0` instead of `develop`)
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A tool version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolVersion'
            text/plain:
              schema:
                $ref: '#/components/schemas/ToolVersion'
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      tags:
      - GA4GHV20
      summary: Get the tool descriptor for the specified tool
      description: Returns the descriptor for the specified tool (examples include
        CWL, WDL, or Nextflow documents).
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      parameters:
      - name: type
        in: path
        description: The output type of the descriptor. Plain types return the bare
          descriptor while the "non-plain" types return a descriptor wrapped with
          metadata. Allowable values include "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL",
          "PLAIN_NFL".
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version, scoped to this registry, for
          example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                $ref: '#/components/schemas/FileWrapper'
        "404":
          description: The tool descriptor can not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      tags:
      - GA4GHV20
      summary: Get additional tool descriptor files relative to the main file
      description: Descriptors can often include imports that refer to additional
        descriptors. This returns additional descriptors for the specified tool in
        the same or other directories that can be reached as a relative path. This
        endpoint can be useful for workflow engine implementations like cwltool to
        programmatically download all the descriptors for a tool and run it. This
        can optionally include other files described with FileWrappers such as test
        parameters and containerfiles.
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      parameters:
      - name: type
        in: path
        description: The output type of the descriptor. If not specified, it is up
          to the underlying implementation to determine which output type to return.
          Plain types return the bare descriptor while the "non-plain" types return
          a descriptor wrapped with metadata. Allowable values are "CWL", "WDL", "NFL",
          "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL".
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        description: A relative path to the additional file (same directory or subdirectories),
          for example 'foo.cwl' would return a 'foo.cwl' from the same directory as
          the main descriptor. 'nestedDirectory/foo.cwl' would return the file  from
          a nested subdirectory.  Unencoded paths such 'sampleDirectory/foo.cwl' should
          also be allowed.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                $ref: '#/components/schemas/FileWrapper'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/files:
    get:
      tags:
      - GA4GHV20
      summary: Get a list of objects that contain the relative path and file type
      description: 'Get a list of objects that contain the relative path and file
        type. The descriptors are intended for use with the /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path
        : .+} endpoint.'
      operationId: toolsIdVersionsVersionIdTypeFilesGet
      parameters:
      - name: type
        in: path
        description: The output type of the descriptor. Examples of allowable values
          are "CWL", "WDL", and "NFL".
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The array of File JSON responses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolFile'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolFile'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      tags:
      - GA4GHV20
      summary: Get a list of test JSONs
      description: Get a list of test JSONs (these allow you to execute the tool successfully)
        suitable for use with this descriptor type.
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      parameters:
      - name: type
        in: path
        description: The type of the underlying descriptor. Allowable values include
          "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL". For example,
          "CWL" would return an list of ToolTests objects while "PLAIN_CWL" would
          return a bare JSON list with the content of the tests.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /api/ga4gh/v2/metadata:
    get:
      tags:
      - GA4GH
      operationId: metadataGet
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/metadata:
    get:
      tags:
      - GA4GHV1
      operationId: metadataGet_1
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/toolClasses:
    get:
      tags:
      - GA4GH
      operationId: toolClassesGet_1
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tool-classes:
    get:
      tags:
      - GA4GHV1
      operationId: toolClassesGet_2
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools:
    get:
      tags:
      - GA4GH
      operationId: toolsGet_1
      parameters:
      - name: id
        in: query
        schema:
          type: string
      - name: alias
        in: query
        schema:
          type: string
      - name: registry
        in: query
        schema:
          type: string
      - name: organization
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: toolname
        in: query
        schema:
          type: string
      - name: description
        in: query
        schema:
          type: string
      - name: author
        in: query
        schema:
          type: string
      - name: checker
        in: query
        schema:
          type: boolean
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}:
    get:
      tags:
      - GA4GH
      operationId: toolsIdGet_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions:
    get:
      tags:
      - GA4GH
      operationId: toolsIdVersionsGet_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/containerfile:
    get:
      tags:
      - GA4GH
      operationId: toolsIdVersionsVersionIdContainerfileGet_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}:
    get:
      tags:
      - GA4GH
      operationId: toolsIdVersionsVersionIdGet_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      tags:
      - GA4GH
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet_1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      tags:
      - GA4GH
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet_1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/files:
    get:
      tags:
      - GA4GH
      operationId: toolsIdVersionsVersionIdTypeFilesGet_1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      tags:
      - GA4GH
      operationId: toolsIdVersionsVersionIdTypeTestsGet_1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools:
    get:
      tags:
      - GA4GHV1
      summary: List all tools
      description: This endpoint returns all tools available or a filtered subset
        using metadata query parameters.
      operationId: toolsGetV1
      parameters:
      - name: id
        in: query
        schema:
          type: string
      - name: registry
        in: query
        schema:
          type: string
      - name: organization
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: toolname
        in: query
        schema:
          type: string
      - name: description
        in: query
        schema:
          type: string
      - name: author
        in: query
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: An array of Tools that match the filter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolV1'
  /api/ga4gh/v1/tools/{id}:
    get:
      tags:
      - GA4GHV1
      summary: List one specific tool, acts as an anchor for self references
      description: This endpoint returns one specific tool (which has ToolVersions
        nested inside it)
      operationId: toolsIdGetV1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolV1'
  /api/ga4gh/v1/tools/{id}/versions:
    get:
      tags:
      - GA4GHV1
      summary: List versions of a tool
      description: Returns all versions of the specified tool
      operationId: toolsIdVersionGetV1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: An array of tool versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolVersionV1'
  /api/ga4gh/v1/tools/{id}/versions/{version_id}:
    get:
      tags:
      - GA4GHV1
      summary: List one specific tool version, acts as an anchor for self references
      description: This endpoint returns one specific tool version
      operationId: versionIdGetV1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A tool version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolVersionV1'
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      tags:
      - GA4GHV1
      summary: Get the tool descriptor (CWL/WDL) for the specified tool.
      description: Returns the CWL or WDL descriptor for the specified tool.
      operationId: descriptorGetV1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      tags:
      - GA4GHV1
      summary: Get additional tool descriptor files (CWL/WDL) relative to the main
        file
      description: Returns additional CWL or WDL descriptors for the specified tool
        in the same or subdirectories
      operationId: relativeDescriptorGetV1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDescriptor'
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      tags:
      - GA4GHV1
      summary: Get an array of test JSONs suitable for use with this descriptor type.
      operationId: testsGetV1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolTestsV1'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolTestsV1'
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile:
    get:
      tags:
      - GA4GHV1
      summary: Get the dockerfile for the specified image.
      description: Returns the dockerfile for the specified image.
      operationId: dockerfileGetV1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDockerfile'
  /swagger:
    get:
      operationId: getListingJson
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /swagger.{type}:
    get:
      operationId: getListing
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/yaml: {}
components:
  schemas:
    Alias:
      type: object
      properties:
        content:
          type: string
    Aliasable:
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
    Checksum:
      required:
      - checksum
      - type
      type: object
      properties:
        checksum:
          type: string
          description: 'The hex-string encoded checksum for the data. '
        type:
          type: string
          description: The digest method used to create the checksum. The value (e.g.
            `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH
            Checksum Hash Algorithm Registry]. Other values MAY be used, as long as
            implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].
            GA4GH may provide more explicit guidance for use of non-IANA-registered
            algorithms in the future.
      description: 'A production (immutable) tool version is required to have a hashcode.
        Not required otherwise, but might be useful to detect changes. '
      example: '[{checksum=ea2a5db69bd20a42976838790bc29294df3af02b, type=sha1}]'
    EntryObjectObject:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          type: string
        description:
          type: string
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        email:
          type: string
        lastUpdated:
          type: integer
          format: int64
        gitUrl:
          type: string
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
        topicId:
          type: integer
          format: int64
        conceptDoi:
          type: string
        licenseInformation:
          $ref: '#/components/schemas/LicenseInformation'
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            type: object
        defaultVersion:
          type: string
        metadataFromEntry:
          type: object
          writeOnly: true
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        is_published:
          type: boolean
        last_modified:
          type: integer
          format: int32
        checker_id:
          type: integer
          format: int64
        has_checker:
          type: boolean
        last_modified_date:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
    FileFormat:
      type: object
      properties:
        value:
          type: string
    Image:
      type: object
      properties:
        checksums:
          type: array
          items:
            $ref: '#/components/schemas/Checksum'
        repository:
          type: string
        tag:
          type: string
        imageID:
          type: string
        imageRegistry:
          type: string
          enum:
          - QUAY_IO
          - DOCKER_HUB
          - GITLAB
          - AMAZON_ECR
          - SEVEN_BRIDGES
        architecture:
          type: string
        os:
          type: string
    Label:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
    LicenseInformation:
      type: object
      properties:
        licenseName:
          type: string
    ParsedInformation:
      type: object
      properties:
        descriptorLanguage:
          type: string
          enum:
          - CWL
          - WDL
          - gxformat2
          - SWL
          - NFL
          - service
          - cwl
          - wdl
        hasHTTPImports:
          type: boolean
        hasLocalImports:
          type: boolean
    Profile:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        avatarURL:
          type: string
        company:
          type: string
        location:
          type: string
        bio:
          type: string
        username:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        isAdmin:
          type: boolean
        userProfiles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Profile'
        avatarUrl:
          type: string
        curator:
          type: boolean
        setupComplete:
          type: boolean
        privacyPolicyVersion:
          type: string
          enum:
          - NONE
          - PRIVACY_POLICY_VERSION_2_5
        privacyPolicyVersionAcceptanceDate:
          type: integer
          format: int64
        orcid:
          type: string
        tosversion:
          type: string
          enum:
          - NONE
          - TOS_VERSION_1
        tosacceptanceDate:
          type: integer
          format: int64
        tosversionAcceptanceDate:
          type: integer
          format: int64
          writeOnly: true
        name:
          type: string
    Validation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - DOCKSTORE_CWL
          - DOCKSTORE_WDL
          - DOCKERFILE
          - CWL_TEST_JSON
          - WDL_TEST_JSON
          - NEXTFLOW
          - NEXTFLOW_CONFIG
          - NEXTFLOW_TEST_PARAMS
          - DOCKSTORE_YML
          - DOCKSTORE_SERVICE_YML
          - DOCKSTORE_SERVICE_TEST_JSON
          - DOCKSTORE_SERVICE_OTHER
          - DOCKSTORE_GXFORMAT2
          - GXFORMAT2_TEST_FILE
          - DOCKSTORE_SWL
          - SWL_TEST_JSON
        valid:
          type: boolean
        message:
          type: string
    Version:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reference:
          type: string
        name:
          type: string
        parent:
          $ref: '#/components/schemas/EntryObjectObject'
        commitID:
          type: string
        frozen:
          type: boolean
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        valid:
          type: boolean
        dirtyBit:
          type: boolean
        versionMetadata:
          $ref: '#/components/schemas/VersionMetadata'
        versionEditor:
          $ref: '#/components/schemas/User'
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        images:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Image'
        hidden:
          type: boolean
        description:
          type: string
        workingDirectory:
          type: string
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          type: array
          items:
            type: string
        doiURL:
          type: string
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        descriptionSource:
          type: string
          enum:
          - README
          - DESCRIPTOR
        author:
          type: string
        email:
          type: string
        dbUpdateDate:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
    VersionMetadata:
      type: object
      properties:
        parsedInformationSet:
          type: array
          items:
            $ref: '#/components/schemas/ParsedInformation'
        id:
          type: integer
          format: int64
    WorkflowVersion:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reference:
          type: string
        name:
          type: string
        parent:
          $ref: '#/components/schemas/EntryObjectObject'
        commitID:
          type: string
        frozen:
          type: boolean
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        valid:
          type: boolean
        dirtyBit:
          type: boolean
        versionMetadata:
          $ref: '#/components/schemas/VersionMetadata'
        versionEditor:
          $ref: '#/components/schemas/User'
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        images:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Image'
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        subClass:
          type: string
          enum:
          - DOCKER_COMPOSE
          - SWARM
          - KUBERNETES
          - HELM
        workingDirectory:
          type: string
        legacyVersion:
          type: boolean
        hidden:
          type: boolean
        description:
          type: string
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          type: array
          items:
            type: string
        doiURL:
          type: string
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        descriptionSource:
          type: string
          enum:
          - README
          - DESCRIPTOR
        author:
          type: string
        email:
          type: string
        dbUpdateDate:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        workflow_path:
          type: string
        last_modified:
          type: integer
          format: int64
    WorkflowVersionPathInfo:
      type: object
      properties:
        fullWorkflowPath:
          type: string
        tagName:
          type: string
    Collection:
      required:
      - name
      - topic
      type: object
      properties:
        id:
          type: integer
          description: Implementation specific ID for the collection in this web service
          format: int64
        name:
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
          description: Name of the collection
          example: Alignment
        description:
          type: string
          description: Description of the collection
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        topic:
          type: string
          description: Short description of the collection
          example: A collection of alignment algorithms
        organizationID:
          type: integer
          format: int64
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CollectionEntry'
        organizationName:
          type: string
      description: Collection in an organization, collects entries
    CollectionEntry:
      type: object
      properties:
        entryPath:
          type: string
        dbUpdateDate:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        entryType:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reference:
          type: string
        name:
          type: string
        parent:
          $ref: '#/components/schemas/EntryObjectObject'
        commitID:
          type: string
        frozen:
          type: boolean
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        valid:
          type: boolean
        dirtyBit:
          type: boolean
        versionMetadata:
          $ref: '#/components/schemas/VersionMetadata'
        versionEditor:
          $ref: '#/components/schemas/User'
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        images:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Image'
        size:
          type: integer
          format: int64
        automated:
          type: boolean
        workingDirectory:
          type: string
        hidden:
          type: boolean
        description:
          type: string
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          type: array
          items:
            type: string
        doiURL:
          type: string
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        descriptionSource:
          type: string
          enum:
          - README
          - DESCRIPTOR
        author:
          type: string
        email:
          type: string
        dbUpdateDate:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        last_built:
          type: integer
          format: int64
        image_id:
          type: string
        dockerfile_path:
          type: string
        cwl_path:
          type: string
        wdl_path:
          type: string
    Tool:
      required:
      - id
      - organization
      - toolclass
      - url
      - versions
      type: object
      properties:
        url:
          type: string
          description: The URL for this tool in this registry.
          example: http://agora.broadinstitute.org/tools/123456
        id:
          type: string
          description: A unique identifier of the tool, scoped to this registry.
          example: "123456"
        aliases:
          type: array
          description: Support for this parameter is optional for tool registries
            that support aliases. A list of strings that can be used to identify this
            tool which could be  straight up URLs.  This can be used to expose alternative
            ids (such as GUIDs) for a tool for registries. Can be used to match tools
            across registries.
          items:
            type: string
            description: Support for this parameter is optional for tool registries
              that support aliases. A list of strings that can be used to identify
              this tool which could be  straight up URLs.  This can be used to expose
              alternative ids (such as GUIDs) for a tool for registries. Can be used
              to match tools across registries.
        organization:
          type: string
          description: The organization that published the image.
        name:
          type: string
          description: The name of the tool.
        toolclass:
          $ref: '#/components/schemas/ToolClass'
        description:
          type: string
          description: The description of the tool.
        meta_version:
          type: string
          description: The version of this tool in the registry. Iterates when fields
            like the description, author, etc. are updated.
        has_checker:
          type: boolean
          description: Whether this tool has a checker tool associated with it.
        checker_url:
          type: string
          description: Optional url to the checker tool that will exit successfully
            if this tool produced the expected result given test data.
        versions:
          type: array
          description: A list of versions for this tool.
          items:
            $ref: '#/components/schemas/ToolVersion'
      description: A tool (or described tool) is defined as a tuple of a descriptor
        file (which potentially consists of multiple files), a set of container images,
        and a set of instructions for creating those images.
    PublishRequest:
      type: object
      properties:
        publish:
          type: boolean
    SourceFile:
      required:
      - absolutePath
      - path
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          description: Enumerates the type of file
          enum:
          - DOCKSTORE_CWL
          - DOCKSTORE_WDL
          - DOCKERFILE
          - CWL_TEST_JSON
          - WDL_TEST_JSON
          - NEXTFLOW
          - NEXTFLOW_CONFIG
          - NEXTFLOW_TEST_PARAMS
          - DOCKSTORE_YML
          - DOCKSTORE_SERVICE_YML
          - DOCKSTORE_SERVICE_TEST_JSON
          - DOCKSTORE_SERVICE_OTHER
          - DOCKSTORE_GXFORMAT2
          - GXFORMAT2_TEST_FILE
          - DOCKSTORE_SWL
          - SWL_TEST_JSON
        content:
          type: string
        path:
          type: string
          description: Path to sourcefile relative to its parent
        absolutePath:
          type: string
          description: Absolute path of sourcefile in git repo
        frozen:
          type: boolean
        checksums:
          type: array
          items:
            $ref: '#/components/schemas/Checksum'
        verifiedBySource:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VerificationInformation'
    VerificationInformation:
      type: object
      properties:
        verified:
          type: boolean
        metadata:
          type: string
        platformVersion:
          type: string
    RegistryBean:
      type: object
      properties:
        dockerPath:
          type: string
        friendlyName:
          type: string
        url:
          type: string
        privateOnly:
          type: string
        customDockerPath:
          type: string
        enum:
          type: string
    StarRequest:
      type: object
      properties:
        star:
          type: boolean
    Entry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          type: string
        description:
          type: string
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        email:
          type: string
        lastUpdated:
          type: integer
          format: int64
        gitUrl:
          type: string
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
        topicId:
          type: integer
          format: int64
        conceptDoi:
          type: string
        licenseInformation:
          $ref: '#/components/schemas/LicenseInformation'
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Version'
        defaultVersion:
          type: string
        metadataFromEntry:
          $ref: '#/components/schemas/Entry'
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        is_published:
          type: boolean
        last_modified:
          type: integer
          format: int32
        checker_id:
          type: integer
          format: int64
        has_checker:
          type: boolean
        last_modified_date:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
    CollectionOrganization:
      type: object
      properties:
        collectionId:
          type: integer
          format: int64
        collectionName:
          type: string
        collectionDisplayName:
          type: string
        organizationId:
          type: integer
          format: int64
        organizationName:
          type: string
        organizationDisplayName:
          type: string
    VersionVerifiedPlatform:
      type: object
      properties:
        versionId:
          type: integer
          format: int64
        metadata:
          type: string
        source:
          type: string
        platformVersion:
          type: string
        path:
          type: string
        verified:
          type: boolean
    BioWorkflow:
      type: object
      allOf:
      - $ref: '#/components/schemas/Workflow'
      - type: object
        properties:
          is_checker:
            type: boolean
          parent_id:
            type: integer
            format: int64
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        organization:
          $ref: '#/components/schemas/Organization'
        tool:
          $ref: '#/components/schemas/Tool'
        workflow:
          $ref: '#/components/schemas/Workflow'
        collection:
          $ref: '#/components/schemas/Collection'
        initiatorUser:
          $ref: '#/components/schemas/User'
        version:
          $ref: '#/components/schemas/Version'
        type:
          type: string
          enum:
          - CREATE_ORG
          - DELETE_ORG
          - MODIFY_ORG
          - APPROVE_ORG
          - REJECT_ORG
          - REREQUEST_ORG
          - ADD_USER_TO_ORG
          - REMOVE_USER_FROM_ORG
          - MODIFY_USER_ROLE_ORG
          - APPROVE_ORG_INVITE
          - REJECT_ORG_INVITE
          - CREATE_COLLECTION
          - MODIFY_COLLECTION
          - REMOVE_FROM_COLLECTION
          - ADD_TO_COLLECTION
          - ADD_VERSION_TO_ENTRY
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
    Organization:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
        description:
          type: string
        link:
          type: string
        location:
          type: string
        email:
          type: string
        status:
          type: string
          enum:
          - PENDING
          - REJECTED
          - APPROVED
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUser'
        topic:
          type: string
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
        avatarUrl:
          pattern: ([^\s]+)(\.jpg|\.jpeg|\.png|\.gif)
          type: string
    OrganizationUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrganizationUserId'
        user:
          $ref: '#/components/schemas/User'
        organization:
          $ref: '#/components/schemas/Organization'
        role:
          type: string
          enum:
          - MAINTAINER
          - MEMBER
        accepted:
          type: boolean
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
    OrganizationUserId:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        organizationId:
          type: integer
          format: int64
    Service:
      type: object
      allOf:
      - $ref: '#/components/schemas/Workflow'
    Workflow:
      required:
      - type
      type: object
      properties:
        descriptorType:
          type: string
          enum:
          - CWL
          - WDL
          - gxformat2
          - SWL
          - NFL
          - service
          - cwl
          - wdl
        id:
          type: integer
          format: int64
        author:
          type: string
        description:
          type: string
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        email:
          type: string
        lastUpdated:
          type: integer
          format: int64
        gitUrl:
          type: string
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
        topicId:
          type: integer
          format: int64
        conceptDoi:
          type: string
        licenseInformation:
          $ref: '#/components/schemas/LicenseInformation'
        mode:
          type: string
          enum:
          - FULL
          - STUB
          - HOSTED
          - DOCKSTORE_YML
        workflowName:
          type: string
        organization:
          type: string
        repository:
          type: string
        sourceControl:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
        descriptorTypeSubclass:
          type: string
          enum:
          - docker-compose
          - helm
          - swarm
          - kubernetes
          - n/a
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/WorkflowVersion'
        parentEntry:
          $ref: '#/components/schemas/Entry'
        isChecker:
          type: boolean
        path:
          type: string
        defaultVersion:
          type: string
        metadataFromEntry:
          $ref: '#/components/schemas/Workflow'
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        is_published:
          type: boolean
        last_modified:
          type: integer
          format: int32
        workflow_path:
          type: string
        full_workflow_path:
          type: string
        source_control_provider:
          type: string
        defaultTestParameterFilePath:
          type: string
        checker_id:
          type: integer
          format: int64
        has_checker:
          type: boolean
        last_modified_date:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        type:
          type: string
      discriminator:
        propertyName: type
    LambdaEvent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        organization:
          type: string
        repository:
          type: string
        githubUsername:
          type: string
        reference:
          type: string
        success:
          type: boolean
        message:
          type: string
        type:
          type: string
          enum:
          - PUSH
          - DELETE
          - INSTALL
        eventDate:
          type: integer
          format: int64
    Config:
      type: object
      properties:
        dnaStackImportUrl:
          type: string
        dnaNexusImportUrl:
          type: string
        terraImportUrl:
          type: string
        bdCatalystTerraImportUrl:
          type: string
        bdCatalystSevenBridgesImportUrl:
          type: string
        gitHubAuthUrl:
          type: string
        gitHubRedirectPath:
          type: string
        gitHubScope:
          type: string
        quayIoAuthUrl:
          type: string
        quayIoRedirectPath:
          type: string
        quayIoScope:
          type: string
        bitBucketAuthUrl:
          type: string
        gitlabAuthUrl:
          type: string
        gitlabRedirectPath:
          type: string
        gitlabScope:
          type: string
        zenodoAuthUrl:
          type: string
        zenodoRedirectPath:
          type: string
        zenodoScope:
          type: string
        orcidAuthUrl:
          type: string
        orcidRedirectPath:
          type: string
        orcidScope:
          type: string
        googleScope:
          type: string
        cwlVisualizerUri:
          type: string
        tagManagerId:
          type: string
        gitHubAppInstallationUrl:
          type: string
        documentationUrl:
          type: string
        featuredContentUrl:
          type: string
        deployVersion:
          type: string
        composeSetupVersion:
          type: string
        githubClientId:
          type: string
        quayIoClientId:
          type: string
        bitBucketClientId:
          type: string
        gitlabClientId:
          type: string
        zenodoClientId:
          type: string
        googleClientId:
          type: string
        orcidClientId:
          type: string
        discourseUrl:
          type: string
        gitCommitId:
          type: string
        gitBuildVersion:
          type: string
    SourceControlBean:
      type: object
      properties:
        value:
          type: string
        friendlyName:
          type: string
    DescriptorLanguageBean:
      type: object
      properties:
        value:
          type: string
        friendlyName:
          type: string
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        message:
          maxLength: 1024
          minLength: 0
          type: string
        expiration:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - SITEWIDE
          - NEWSBODY
        priority:
          type: string
          enum:
          - LOW
          - MEDIUM
          - CRITICAL
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tokenSource:
          type: string
          enum:
          - quay.io
          - github.com
          - dockstore
          - bitbucket.org
          - gitlab.com
          - zenodo.org
          - google.com
          - orcid.org
        content:
          type: string
        username:
          type: string
        refreshToken:
          type: string
        userId:
          type: integer
          format: int64
        dbCreateDate:
          type: integer
          format: int64
        dbUpdateDate:
          type: integer
          format: int64
        token:
          type: string
    ToolTesterLog:
      type: object
      properties:
        toolId:
          type: string
        toolVersionName:
          type: string
        testFilename:
          type: string
        runner:
          type: string
        logType:
          type: string
          enum:
          - FULL
          - SUMMARY
        filename:
          type: string
    ExtendedUserData:
      type: object
      properties:
        canChangeUsername:
          type: boolean
    OrganizationUpdateTime:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        lastUpdateDate:
          type: integer
          format: int64
    EntryUpdateTime:
      type: object
      properties:
        path:
          type: string
        prettyPath:
          type: string
        entryType:
          type: string
          enum:
          - TOOL
          - WORKFLOW
          - SERVICE
        lastUpdateDate:
          type: integer
          format: int64
    Limits:
      type: object
      properties:
        hostedEntryCountLimit:
          type: integer
          format: int32
        hostedEntryVersionLimit:
          type: integer
          format: int32
    PrivilegeRequest:
      type: object
      properties:
        admin:
          type: boolean
        curator:
          type: boolean
    Repository:
      type: object
      properties:
        organization:
          type: string
        repositoryName:
          type: string
        gitRegistry:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
        canDelete:
          type: boolean
        present:
          type: boolean
        path:
          type: string
    SharedWorkflows:
      type: object
      properties:
        role:
          type: string
          enum:
          - OWNER
          - WRITER
          - READER
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
    Permission:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          enum:
          - OWNER
          - WRITER
          - READER
    ToolClass:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    ToolV1:
      type: object
      properties:
        url:
          type: string
        id:
          type: string
        organization:
          type: string
        toolname:
          type: string
        toolclass:
          $ref: '#/components/schemas/ToolClass'
        description:
          type: string
        author:
          type: string
        meta-version:
          type: string
        contains:
          type: array
          items:
            type: string
        verified:
          type: boolean
        verified-source:
          type: string
        signed:
          type: boolean
        versions:
          type: array
          items:
            $ref: '#/components/schemas/ToolVersionV1'
    ToolVersionV1:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        id:
          type: string
        image:
          type: string
        descriptor-type:
          type: array
          items:
            type: string
            enum:
            - CWL
            - WDL
        dockerfile:
          type: boolean
        meta-version:
          type: string
        verified:
          type: boolean
        verified-source:
          type: string
    Error:
      required:
      - code
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    ServiceType:
      required:
      - artifact
      - group
      - version
      type: object
      properties:
        group:
          type: string
          description: Namespace in reverse domain name format. Use `org.ga4gh` for
            implementations compliant with official GA4GH specifications. For services
            with custom APIs not standardized by GA4GH, or implementations diverging
            from official GA4GH specifications, use a different namespace (e.g. your
            organization's reverse domain name).
          example: org.ga4gh
        artifact:
          type: string
          description: Name of the API or GA4GH specification implemented. Official
            GA4GH types should be assigned as part of standards approval process.
            Custom artifacts are supported.
          example: beacon
        version:
          type: string
          description: Version of the API or specification. GA4GH specifications use
            semantic versioning.
          example: 1.0.0
      description: Type of a GA4GH service
    TRSService:
      required:
      - id
      - name
      - organization
      - type
      - version
      type: object
      properties:
        id:
          type: string
          description: Unique ID of this service. Reverse domain name notation is
            recommended, though not required. The identifier should attempt to be
            globally unique so it can be used in downstream aggregator services e.g.
            Service Registry.
          example: org.ga4gh.myservice
        name:
          type: string
          description: Name of this service. Should be human readable.
          example: My project
        type:
          $ref: '#/components/schemas/ServiceType'
        description:
          type: string
          description: Description of the service. Should be human readable and provide
            information about the service.
          example: This service provides...
        organization:
          type: object
          description: Organization providing the service
        contactUrl:
          type: string
          description: URL of the contact for the provider of this service, e.g. a
            link to a contact form (RFC 3986 format), or an email (RFC 2368 format).
          example: mailto:support@example.com
        documentationUrl:
          type: string
          description: URL of the documentation of this service (RFC 3986 format).
            This should help someone learn how to use your service, including any
            specifics required to access data, e.g. authentication.
          example: https://docs.myservice.example.com
        createdAt:
          type: string
          description: Timestamp describing when the service was first deployed and
            available (RFC 3339 format)
          format: date-time
          example: 2019-06-04T12:58:19Z
        updatedAt:
          type: string
          description: Timestamp describing when the service was last updated (RFC
            3339 format)
          format: date-time
          example: 2019-06-04T12:58:19Z
        environment:
          type: string
          description: Environment the service is running in. Use this to distinguish
            between production, development and testing/staging deployments. Suggested
            values are prod, test, dev, staging. However this is advised and not enforced.
          example: test
        version:
          type: string
          description: Version of the service being described. Semantic versioning
            is recommended, but other identifiers, such as dates or commit hashes,
            are also allowed. The version should be changed whenever the service is
            updated.
          example: 1.0.0
      description: GA4GH service
    ImageData:
      type: object
      properties:
        registry_host:
          type: string
          description: A docker registry or a URL to a Singularity registry. Used
            along with image_name to locate a specific image.
        image_name:
          type: string
          description: Used in conjunction with a registry_url if provided to locate
            images.
        size:
          type: integer
          description: Size of the container in bytes.
          format: int32
        updated:
          type: string
          description: Last time the container was updated.
        checksum:
          type: array
          description: A production (immutable) tool version is required to have a
            hashcode. Not required otherwise, but might be useful to detect changes.  This
            exposes the hashcode for specific image versions to verify that the container
            version pulled is actually the version that was indexed by the registry.
          example: '[{checksum=77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182,
            type=sha256}]'
          items:
            $ref: '#/components/schemas/Checksum'
        image_type:
          type: string
          enum:
          - Docker
          - Singularity
          - Conda
      description: Describes one container image.
    ToolVersion:
      required:
      - id
      - url
      type: object
      properties:
        author:
          type: array
          description: Contact information for the author of this version of the tool
            in the registry. (More complex authorship information is handled by the
            descriptor).
          items:
            type: string
            description: Contact information for the author of this version of the
              tool in the registry. (More complex authorship information is handled
              by the descriptor).
        name:
          type: string
          description: The name of the version.
        url:
          type: string
          description: The URL for this tool version in this registry.
          example: http://agora.broadinstitute.org/tools/123456/versions/1
        id:
          type: string
          description: An identifier of the version of this tool for this particular
            tool registry.
          example: v1
        is_production:
          type: boolean
          description: This version of a tool is guaranteed to not change over time
            (for example, a  tool built from a tag in git as opposed to a branch).
            A production quality tool  is required to have a checksum
        images:
          type: array
          description: All known docker images (and versions/hashes) used by this
            tool. If the tool has to evaluate any of the docker images strings at
            runtime, those ones cannot be reported here.
          items:
            $ref: '#/components/schemas/ImageData'
        descriptor_type:
          type: array
          description: The type (or types) of descriptors available.
          items:
            type: string
            description: The type (or types) of descriptors available.
            enum:
            - CWL
            - WDL
            - NFL
            - SERVICE
            - GALAXY
        containerfile:
          type: boolean
          description: Reports if this tool has a containerfile available. (For Docker-based
            tools, this would indicate the presence of a Dockerfile)
        meta_version:
          type: string
          description: The version of this tool version in the registry. Iterates
            when fields like the description, author, etc. are updated.
        verified:
          type: boolean
          description: Reports whether this tool has been verified by a specific organization
            or individual.
        verified_source:
          type: array
          description: Source of metadata that can support a verified tool, such as
            an email or URL.
          items:
            type: string
            description: Source of metadata that can support a verified tool, such
              as an email or URL.
        signed:
          type: boolean
          description: Reports whether this version of the tool has been signed.
        included_apps:
          type: array
          description: An array of IDs for the applications that are stored inside
            this tool.
          example: '[https://bio.tools/tool/mytum.de/SNAP2/1, https://bio.tools/bioexcel_seqqc]'
          items:
            type: string
            description: An array of IDs for the applications that are stored inside
              this tool.
            example: '[https://bio.tools/tool/mytum.de/SNAP2/1, https://bio.tools/bioexcel_seqqc]'
      description: A tool version describes a particular iteration of a tool as described
        by a reference to a specific image and/or documents.
    FileWrapper:
      type: object
      properties:
        content:
          type: string
          description: The content of the file itself. One of url or content is required.
        checksum:
          type: array
          description: 'A production (immutable) tool version is required to have
            a hashcode. Not required otherwise, but might be useful to detect changes. '
          example: '[{checksum=ea2a5db69bd20a42976838790bc29294df3af02b, type=sha1}]'
          items:
            $ref: '#/components/schemas/Checksum'
        url:
          type: string
          description: Optional url to the underlying content, should include version
            information, and can include a git hash.  Note that this URL should resolve
            to the raw unwrapped content that would otherwise be available in content.
            One of url or content is required.
      description: 'A file provides content for one of - A tool descriptor is a metadata
        document that describes one or more tools. - A tool document that describes
        how to test with one or more sample test JSON. - A containerfile is a document
        that describes how to build a particular container image. Examples include
        Dockerfiles for creating Docker images and Singularity recipes for Singularity
        images '
    ToolFile:
      type: object
      properties:
        path:
          type: string
          description: Relative path of the file.  A descriptor's path can be used
            with the GA4GH .../{type}/descriptor/{relative_path} endpoint.
        file_type:
          type: string
          enum:
          - TEST_FILE
          - PRIMARY_DESCRIPTOR
          - SECONDARY_DESCRIPTOR
          - CONTAINERFILE
          - OTHER
    ToolDescriptor:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - CWL
          - WDL
          - NFL
          - SERVICE
          - GXFORMAT2
        descriptor:
          type: string
        url:
          type: string
    ToolTestsV1:
      type: object
      properties:
        test:
          type: string
        url:
          type: string
    ToolDockerfile:
      type: object
      properties:
        dockerfile:
          type: string
        url:
          type: string
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
